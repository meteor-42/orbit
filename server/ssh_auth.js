const fs = require('fs');
const readline = require('readline');
const chalk = require('chalk');

// –ü—É—Ç—å –¥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞ SSH (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const AUTH_LOG = '/var/log/auth.log';

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
const logRegex = new RegExp(
  String.raw`(?<date>\w{3}\s+\d{1,2}) (?<time>\d{2}:\d{2}:\d{2}) [\w\-]+ sshd\[\d+\]: ` +
  String.raw`(?:Invalid user|Failed password for|Received disconnect from|Connection closed by|Connection reset by)? ?` +
  String.raw`(?:invalid user )?(?<user>\w+)? ?from (?<src_ip>\d{1,3}(?:\.\d{1,3}){3}) port (?<port>\d+)`
);

// üöÄ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–æ–∫–∏
function determineStatus(line) {
  if (line.includes('Failed password')) return 'FAILED';
  if (line.includes('disconnect')) return 'DISCONNECTED';
  if (line.includes('Connection closed') || line.includes('reset by')) return 'CLOSED';
  return null;
}

// üé® –†–∞—Å–∫—Ä–∞—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
function colorStatus(status) {
  switch (status) {
    case 'FAILED': return chalk.red(status);
    case 'DISCONNECTED':
    case 'CLOSED': return chalk.yellow(status);
    case 'SUCCESS': return chalk.green(status);
    default: return status;
  }
}

// üìñ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏
function parseLine(line) {
  const match = logRegex.exec(line);
  if (match) {
    const groups = match.groups;
    return {
      date: groups.date,
      time: groups.time,
      user: groups.user || 'unknown',
      ip_from: groups.src_ip,
      port: groups.port,
      status: determineStatus(line),
    };
  }
  return null;
}

// üì° –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (tail -f)
function tailFile(filePath) {
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const stream = fs.createReadStream(filePath, {
    encoding: 'utf8',
    flags: 'r',
  });

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
  stream.on('open', () => {
    fs.stat(filePath, (err, stats) => {
      if (!err) {
        stream.seek = stats.size;
      }
    });
  });

  // –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
  const rl = readline.createInterface({
    input: stream,
    crlfDelay: Infinity,
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  fs.watchFile(filePath, { interval: 300 }, () => {
    const newStream = fs.createReadStream(filePath, {
      start: stream.seek || 0,
      encoding: 'utf8',
    });

    newStream.on('data', (chunk) => {
      stream.seek += chunk.length;
      chunk.split('\n').forEach((line) => {
        if (line.trim() !== '') {
          const data = parseLine(line);
          if (data) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            console.log(
              `[${data.date} ${data.time}] ` +
              `‚Üí From ${data.ip_from}:${data.port} ` +
              `‚Üí user: ${data.user.padEnd(10)} ` +
              `‚Üí status: ${colorStatus(data.status)}`
            );
          }
        }
      });
    });
  });
}

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log(chalk.blue('üì° Real-time SSH log monitor started...'));
tailFile(AUTH_LOG);
